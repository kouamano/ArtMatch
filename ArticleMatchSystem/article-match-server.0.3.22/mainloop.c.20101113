//main loop
int MainLoop(OPT option){
	int acc;
	struct sockaddr_in from;
	socklen_t len = 0;
	char *client_address;
	int client_port = 0;
	int pid;
	int i;
	FILE *db_file;
	int db_c = 0;
	int db_tab = 0;
	int db_line = 0;
	int max_line_size = 0;
	int cur_line_size = 0;
	int cur_num_pos = 0;
	int cur_num_next = 0;
	int test_size = 100000;
	char strbuf_termINT[BUF_SIZE];
	char strbuf_pos[BUF_SIZE];
	char strbuf_next[BUF_SIZE];
	int strsize_termINT = 0;
	int strsize_pos = 0;
	int strsize_next = 0;
	int pos_entry = 0;
	int next_entry = 0;
	int strlen_strbuf_pos = 0;
	int strlen_strbuf_next = 0;
	int in_str = 0;
	int end_line = 0;

	DB(fprintf(stderr,"MainLoop()\n"));

	/* (* init vars */
	init_db_profile(&db_profile);
	DB(fprintf(stderr,"db_profile.num_term:%lld:\n",db_profile.num_term));
	/* *) */

	/* (* read test data */
	TEST_DATA = i_alloc_vec(test_size);
	for(i=0;i<test_size;i++){
		TEST_DATA[i] = i+3;
	}
	/* *) */


	/* (* open file */
	if((db_file = fopen(option.db_file,"r")) == NULL){
		perror(option.db_file);
		exit(1);
	}
	/* *) */
	/* (* check file format */
	fprintf(stderr,"scan(1) start.\n");
	while((db_c = fgetc(db_file)) != EOF){
		//count lines
		cur_line_size++;
		if(db_c == '\n'){
			if(cur_line_size > max_line_size){
				//check max line size
				max_line_size = cur_line_size;
			}
			cur_line_size = 0;
			db_line++;
		}
	}
	fprintf(stderr,"scan(1) end :: lines:%d:\n",db_line);
	fprintf(stderr,"max line size:%d:\n",max_line_size);
	//alloc DB_PROFILE
	db_profile.num_term = db_line;
	db_profile.nums_pos = i_alloc_vec(db_line);
	db_profile.nums_next = ulli_alloc_vec(db_line);
	//count each entries
	fprintf(stderr,"scan(2) start.\n");
	fprintf(stderr,"seek:%d:\n",fseek(db_file,0U,SEEK_SET));
	db_line = 0;
	while((db_c = fgetc(db_file)) != EOF){
		if(db_c == '\n'){
			db_profile.nums_pos[db_line] = cur_num_pos;
			db_profile.nums_next[db_line] = cur_num_next;
			db_tab = 0;
			cur_num_pos = 0;
			cur_num_next = 0;
			db_line++;
		}else if(db_c == '\t'){
			db_tab++;
		}
		if(db_tab == 2){
			if(db_c == ' '){cur_num_pos++;}
		}else if(db_tab == 3){
			if(db_c == ' '){cur_num_next++;}
		}
	}
	if(DB_LEVEL >= 3){
		for(i=0;i<db_profile.num_term;i++){
			fprintf(stderr,"%d : pos,next : %d,%lld\n",i,db_profile.nums_pos[i],db_profile.nums_next[i]);
		}
	}
	fprintf(stderr,"scan(2) end :: size of pos,next in each line.\n");
	/* *) */
	/* (* alloc DB_TERM_ENTRY */
	db_term_entry = alloc_db_term_entry(db_profile.num_term);
	fprintf(stderr,"num_term:%lld:\n",db_profile.num_term);
	for(i=0;i<db_profile.num_term;i++){
		db_term_entry[i].num_pos = db_profile.nums_pos[i];
		db_term_entry[i].pos_ID = ui_alloc_vec(db_term_entry[i].num_pos);
		db_term_entry[i].pos_POS = ui_alloc_vec(db_term_entry[i].num_pos);
		db_term_entry[i].num_next = db_profile.nums_next[i];
		db_term_entry[i].next = ui_alloc_vec(db_term_entry[i].num_next);
		
	}
	/* *) */
	/* (* free */
	free(db_profile.nums_pos);
	db_profile.nums_pos = NULL;
	free(db_profile.nums_next);
	db_profile.nums_next = NULL;
	/* *) */

	/* (* read data to DB from stream */
	//UNDER CONSTRUCTION
	fprintf(stderr,"scan(3) start.\n");
	fprintf(stderr,"seek:%d:\n",fseek(db_file,0U,SEEK_SET));
	db_line = 0;
	db_tab = 0;
	in_str = 0;
	while((db_c = fgetc(db_file)) != EOF){
		if(db_c == '\t'){
			in_str = 0;
			db_tab++;
			end_line = 0;
		}else if(db_c == '\n'){
			in_str = 0;
			db_tab = 0;
			db_line++;
			end_line = 1;
		}else{
			in_str = 1;
			end_line = 0;
		}

		if((db_tab == 1)&&(in_str == 1)){
			strbuf_termINT[strsize_termINT] = db_c;
			strsize_termINT++;
		}else if((db_tab == 2)&&(in_str == 0)){//termINT
			//fprintf(stderr,"\ndb_line:%d:\n",db_line);
			strbuf_termINT[strsize_termINT] = '\0';
			//fprintf(stderr,"str:%s:\n",strbuf_termINT);
			//read termINT
			sscanf(strbuf_termINT,"%llx",&db_term_entry[db_line].termINT);
			//fprintf(stderr,"%llX\n",db_term_entry[db_line].termINT);
			strsize_termINT = 0;
			strbuf_termINT[0] = '\0';
		}else if((db_tab == 2)&&(in_str == 1)){//pos
			strbuf_pos[strsize_pos] = db_c;
			strsize_pos++;
		}else if((db_tab == 3)&&(in_str == 0)){
			//fprintf(stderr,"db_line:%d:\n",db_line);
			strbuf_pos[strsize_pos] = '\0';
			//fprintf(stderr,"%s\n",strbuf_pos+1);
			strlen_strbuf_pos = strlen(strbuf_pos);
			//fprintf(stderr,"strlen_strbuf_pos:%d:\n",strlen_strbuf_pos);
			pos_entry = 0;
			//read positions
			if(db_term_entry[db_line].num_pos > 0){
				for(i=0;i<strlen_strbuf_pos;i++){
					if(strbuf_pos[i] == ' '){
						sscanf(strbuf_pos+i," %u,%u",&db_term_entry[db_line].pos_ID[pos_entry],&db_term_entry[db_line].pos_POS[pos_entry]);
						pos_entry++;
					}
				}
			}
			for(i=0;i<db_term_entry[db_line].num_pos;i++){
				//fprintf(stderr,"%u,%u\n",db_term_entry[db_line].pos_ID[i],db_term_entry[db_line].pos_POS[i]);
			}
			strsize_pos = 0;
		//UNDER CONSTRUCTION
		}else if((db_tab == 3)&&(in_str == 1)){//next
			strbuf_next[strsize_next] = db_c;
			strsize_next++;
		}else if(end_line == 1){// Caution::NEW db_line:: !!
			fprintf(stderr,"db_line for next:%d:\n",db_line);
			strbuf_next[strsize_next] = '\0';
			strlen_strbuf_next = strlen(strbuf_next);
			fprintf(stderr,"\nstrbuf_next:%s:\n",strbuf_next);
			next_entry = 0;
			if(db_term_entry[db_line-1].num_next > 0){
				for(i=0;i<strlen_strbuf_next;i++){
					if(strbuf_next[i] == ' '){
						sscanf(strbuf_next+i," %u",&db_term_entry[db_line-1].next[next_entry]);
						next_entry++;
					}
				}
			}
			fprintf(stderr,"num_next:%u:\n",db_term_entry[db_line-1].num_next);
			for(i=0;i<db_term_entry[db_line-1].num_next;i++){
				fprintf(stderr,":%d:next(unsigned int):%u:\n",db_line-1,db_term_entry[db_line-1].next[i]);
			}
			strsize_next = 0;
		}
		//printf("%c",db_c);
	}
	/* *) */
	/* (* close */
	fclose(db_file);
	/* *) */



	/* (* connection loop */
	while(1){
		len=sizeof(from);
		//accept
		acc=accept(Soc,(struct sockaddr *)&from,&len);
		DB(fprintf(stderr,"acc:%d:\n",acc));
		if(acc < 0){
			if(errno != EINTR){
				perror("accept\n");
			}
			continue;
		}
		client_address = c_alloc_vec(strlen(inet_ntoa(from.sin_addr)));
		sprintf(client_address,"%s",inet_ntoa(from.sin_addr));
		client_port=ntohs(from.sin_port);
		DB(fprintf(stderr,"%s:%d\n",client_address,client_port));
		if((pid=fork()) == 0){
			close(Soc);
			Soc=0;
			//operation for client
			ChildLoop(acc,client_address);
			exit(0);
		}
		//close socket
		close(acc);
		acc=0;
		if(client_address != NULL){free(client_address);}
	}
	/* *) */
	return(0);
}
